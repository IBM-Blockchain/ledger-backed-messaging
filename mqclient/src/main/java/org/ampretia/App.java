/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.ampretia;

import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSConsumer;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.JMSProducer;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.TextMessage;

import com.ibm.msg.client.jms.JmsConnectionFactory;
import com.ibm.msg.client.jms.JmsFactoryFactory;
import com.ibm.msg.client.wmq.WMQConstants;
import com.ibm.mq.constants.CMQC;

/**
 * A minimal and simple application for Point-to-point messaging.
 *
 * Application makes use of fixed literals, any customisations will require
 * re-compilation of this source file. Application assumes that the named queue
 * is empty prior to a run.
 *
 * Notes:
 *
 * API type: JMS API (v2.0, simplified domain)
 *
 * Messaging domain: Point-to-point
 *
 * Provider type: IBM MQ
 *
 * Connection mode: Client connection
 *
 * JNDI in use: No
 *
 */
public class App {

	// System exit status value (assume unset value to be 1)
	private static int status = 1;

	// Create variables for the connection to MQ
	private static final String HOST = "mfnqm0-838f.qm.eu-gb.mq.appdomain.cloud"; // Host name or IP address
	private static final int PORT = 31654; // Listener port for your queue manager
	private static final String CHANNEL = "CLOUD.APP.SVRCONN"; // Channel name
	private static final String QMGR = "mfnqm0"; // Queue manager name
	private static final String APP_USER = "ledgermsg"; // User name that application uses to connect to MQ
	private static final String APP_PASSWORD = "aafDmxXmwHDkPD7GoQ-7iDZdLktYR1UHxwFnTLMltH0k"; // Password that the
																								// application uses to
																								// connect to MQ
	private static final String QUEUE_NAME = "DEV.QUEUE.2"; // Queue that the application uses to put and get messages
															// to and from

	/**
	 * Main method
	 *
	 * @param args
	 */
	public static void main(final String[] args) {

		// Variables

		Destination destination = null;
		final JMSProducer producer = null;
		JMSConsumer consumer = null;

		try {
			// Create a connection factory
			final JmsFactoryFactory ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER);
			final JmsConnectionFactory cf = ff.createConnectionFactory();

			// Set the properties
			cf.setStringProperty(WMQConstants.WMQ_HOST_NAME, HOST);
			cf.setIntProperty(WMQConstants.WMQ_PORT, PORT);
			cf.setStringProperty(WMQConstants.WMQ_CHANNEL, CHANNEL);
			cf.setIntProperty(WMQConstants.WMQ_CONNECTION_MODE, WMQConstants.WMQ_CM_CLIENT);
			cf.setStringProperty(WMQConstants.WMQ_QUEUE_MANAGER, QMGR);
			cf.setStringProperty(WMQConstants.WMQ_APPLICATIONNAME, "JmsPutGet (JMS)");
			cf.setBooleanProperty(WMQConstants.USER_AUTHENTICATION_MQCSP, true);
			cf.setStringProperty(WMQConstants.USERID, APP_USER);
			cf.setStringProperty(WMQConstants.PASSWORD, APP_PASSWORD);

			// Create JMS objects
			final JMSContext context = cf.createContext(JMSContext.SESSION_TRANSACTED);

			context.setExceptionListener(new ExceptionListener() {

				@Override
				public void onException(final JMSException exception) {
					recordFailure(exception);

				}

			});
			destination = context.createQueue("queue:///LEDGER.ACTIONS");

			consumer = context.createConsumer(destination); // autoclosable
			consumer.setMessageListener(new MessageListener() {

				@Override
				public void onMessage(final Message message) {
					System.out.println(message);
					context.commit();
				}

			});
			context.start();
			System.out.println("Starting consumer");
			Thread.sleep(1000 * 1000);
		} catch (final JMSException jmsex) {
			recordFailure(jmsex);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	} // end main()

	/**
	 * Record this run as successful.
	 */
	private static void recordSuccess() {
		System.out.println("SUCCESS");
		status = 0;
		return;
	}

	/**
	 * Record this run as failure.
	 *
	 * @param ex
	 */
	private static void recordFailure(final Exception ex) {
		if (ex != null) {
			if (ex instanceof JMSException) {
				processJMSException((JMSException) ex);
			} else {
				System.out.println(ex);
			}
		}
		System.out.println("FAILURE");
		status = -1;
		return;
	}

	/**
	 * Process a JMSException and any associated inner exceptions.
	 *
	 * @param jmsex
	 */
	private static void processJMSException(final JMSException jmsex) {
		System.out.println(jmsex);
		Throwable innerException = jmsex.getLinkedException();
		if (innerException != null) {
			System.out.println("Inner exception(s):");
		}
		while (innerException != null) {
			System.out.println(innerException);
			innerException = innerException.getCause();
		}
		return;
	}

}
