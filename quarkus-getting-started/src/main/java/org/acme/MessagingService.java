/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.acme;

import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.JMSProducer;
import javax.jms.TextMessage;
import javax.json.bind.JsonbBuilder;

import com.ibm.msg.client.jms.JmsConnectionFactory;
import com.ibm.msg.client.jms.JmsFactoryFactory;
import com.ibm.msg.client.wmq.WMQConstants;
import com.ibm.mq.constants.CMQC;

/**
 * A minimal and simple application for Point-to-point messaging.
 *
 * Application makes use of fixed literals, any customisations will require
 * re-compilation of this source file. Application assumes that the named queue
 * is empty prior to a run.
 *
 * Notes:
 *
 * API type: JMS API (v2.0, simplified domain)
 *
 * Messaging domain: Point-to-point
 *
 * Provider type: IBM MQ
 *
 * Connection mode: Client connection
 *
 * JNDI in use: No
 *
 */
public class MessagingService {

	// Create variables for the connection to MQ
	private static final String HOST = "mfnqm0-838f.qm.eu-gb.mq.appdomain.cloud"; // Host name or IP address
	private static final int PORT = 31654; // Listener port for your queue manager
	private static final String CHANNEL = "CLOUD.APP.SVRCONN"; // Channel name
	private static final String QMGR = "mfnqm0"; // Queue manager name
	private static final String APP_USER = "ledgermsg"; // User name that application uses to connect to MQ
	private static final String APP_PASSWORD = "aafDmxXmwHDkPD7GoQ-7iDZdLktYR1UHxwFnTLMltH0k"; // Password that the
																								// application uses to
																								// connect to MQ
	private static final String QUEUE_NAME = "DEV.QUEUE.2"; // Queue that the application uses to put and get messages
															// to and from

	private static MessagingService service = null;

	public static synchronized MessagingService getService() {
		if (service == null) {
			service = new MessagingService();
		}
		return service;
	}

	JMSContext context = null;
	Destination destination = null;
	JMSProducer producer = null;

	/**
	 * Main method
	 *
	 * @param args
	 */
	private MessagingService() {

		try {
			// Create a connection factory
			JmsFactoryFactory ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER);
			JmsConnectionFactory cf = ff.createConnectionFactory();

			// Set the properties
			cf.setStringProperty(WMQConstants.WMQ_HOST_NAME, HOST);
			cf.setIntProperty(WMQConstants.WMQ_PORT, PORT);
			cf.setStringProperty(WMQConstants.WMQ_CHANNEL, CHANNEL);
			cf.setIntProperty(WMQConstants.WMQ_CONNECTION_MODE, WMQConstants.WMQ_CM_CLIENT);
			cf.setStringProperty(WMQConstants.WMQ_QUEUE_MANAGER, QMGR);
			cf.setStringProperty(WMQConstants.WMQ_APPLICATIONNAME, "LedgerMessaging");
			cf.setBooleanProperty(WMQConstants.USER_AUTHENTICATION_MQCSP, true);
			cf.setStringProperty(WMQConstants.USERID, APP_USER);
			cf.setStringProperty(WMQConstants.PASSWORD, APP_PASSWORD);

			// Create JMS objects
			context = cf.createContext(JMSContext.SESSION_TRANSACTED);

			context.setExceptionListener(new ExceptionListener() {

				@Override
				public void onException(JMSException exception) {
					recordFailure(exception);

				}

			});

			destination = context.createQueue("queue:///" + QUEUE_NAME);
			producer = context.createProducer();

		} catch (JMSException jmsex) {
			recordFailure(jmsex);
		}

	} // end main()

	public void send(Message msg) {
		try {

			String data = JsonbBuilder.create().toJson(msg);
			TextMessage message = context.createTextMessage(data);
			message.setIntProperty("JMS_IBM_Report_COA", CMQC.MQRO_COA_WITH_FULL_DATA);
			message.setIntProperty("JMS_IBM_Report_COD", CMQC.MQRO_COD_WITH_FULL_DATA);

			message.setJMSReplyTo(context.createQueue("queue:///LEDGER.ACTIONS"));
			message.setIntProperty(WMQConstants.JMS_IBM_REPORT_PASS_MSG_ID, CMQC.MQRO_PASS_MSG_ID);
			message.setIntProperty(WMQConstants.JMS_IBM_REPORT_PASS_CORREL_ID, CMQC.MQRO_PASS_CORREL_ID);

			message.setStringProperty("name", "value");
			producer.send(destination, message);

			context.commit();

		} catch (JMSException jmsex) {
			recordFailure(jmsex);
		}

	}

	/**
	 * Record this run as failure.
	 *
	 * @param ex
	 */
	private void recordFailure(Exception ex) {
		if (ex != null) {
			if (ex instanceof JMSException) {
				processJMSException((JMSException) ex);
			} else {
				System.out.println(ex);
			}
		}
		System.out.println("FAILURE");
	}

	/**
	 * Process a JMSException and any associated inner exceptions.
	 *
	 * @param jmsex
	 */
	private void processJMSException(JMSException jmsex) {
		System.out.println(jmsex);
		Throwable innerException = jmsex.getLinkedException();
		if (innerException != null) {
			System.out.println("Inner exception(s):");
		}
		while (innerException != null) {
			System.out.println(innerException);
			innerException = innerException.getCause();
		}
	}

}
